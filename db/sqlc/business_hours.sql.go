// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: business_hours.sql

package db

import (
	"context"
	"time"
)

const createBusinessHours = `-- name: CreateBusinessHours :one
INSERT INTO business_hours (
  business_id, day_of_week, open_time, close_time
) VALUES (
  $1, $2, $3,$4
)RETURNING id, business_id, day_of_week, open_time, close_time
`

type CreateBusinessHoursParams struct {
	BusinessID int64     `json:"business_id"`
	DayOfWeek  string    `json:"day_of_week"`
	OpenTime   time.Time `json:"open_time"`
	CloseTime  time.Time `json:"close_time"`
}

func (q *Queries) CreateBusinessHours(ctx context.Context, arg CreateBusinessHoursParams) (BusinessHour, error) {
	row := q.db.QueryRowContext(ctx, createBusinessHours,
		arg.BusinessID,
		arg.DayOfWeek,
		arg.OpenTime,
		arg.CloseTime,
	)
	var i BusinessHour
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
	)
	return i, err
}

const deleteBusinessHour = `-- name: DeleteBusinessHour :one
DELETE FROM business_hours
WHERE id = $1
RETURNING id, business_id, day_of_week, open_time, close_time
`

func (q *Queries) DeleteBusinessHour(ctx context.Context, id int64) (BusinessHour, error) {
	row := q.db.QueryRowContext(ctx, deleteBusinessHour, id)
	var i BusinessHour
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
	)
	return i, err
}

const getBusinessHour = `-- name: GetBusinessHour :one
SELECT id, business_id, day_of_week, open_time, close_time FROM business_hours
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBusinessHour(ctx context.Context, id int64) (BusinessHour, error) {
	row := q.db.QueryRowContext(ctx, getBusinessHour, id)
	var i BusinessHour
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
	)
	return i, err
}

const listBusinessHours = `-- name: ListBusinessHours :many
SELECT id, business_id, day_of_week, open_time, close_time FROM business_hours
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBusinessHoursParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBusinessHours(ctx context.Context, arg ListBusinessHoursParams) ([]BusinessHour, error) {
	rows, err := q.db.QueryContext(ctx, listBusinessHours, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusinessHour
	for rows.Next() {
		var i BusinessHour
		if err := rows.Scan(
			&i.ID,
			&i.BusinessID,
			&i.DayOfWeek,
			&i.OpenTime,
			&i.CloseTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBusinessHour = `-- name: UpdateBusinessHour :exec
UPDATE business_hours
  set business_id = $2,
  day_of_week = $3,
  open_time = $4,
  close_time = $5
WHERE id = $1
`

type UpdateBusinessHourParams struct {
	ID         int64     `json:"id"`
	BusinessID int64     `json:"business_id"`
	DayOfWeek  string    `json:"day_of_week"`
	OpenTime   time.Time `json:"open_time"`
	CloseTime  time.Time `json:"close_time"`
}

func (q *Queries) UpdateBusinessHour(ctx context.Context, arg UpdateBusinessHourParams) error {
	_, err := q.db.ExecContext(ctx, updateBusinessHour,
		arg.ID,
		arg.BusinessID,
		arg.DayOfWeek,
		arg.OpenTime,
		arg.CloseTime,
	)
	return err
}
