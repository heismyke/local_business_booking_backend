// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBookingsStmt, err = db.PrepareContext(ctx, createBookings); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBookings: %w", err)
	}
	if q.createBusinessHoursStmt, err = db.PrepareContext(ctx, createBusinessHours); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBusinessHours: %w", err)
	}
	if q.createBusinessesStmt, err = db.PrepareContext(ctx, createBusinesses); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBusinesses: %w", err)
	}
	if q.createReviewStmt, err = db.PrepareContext(ctx, createReview); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReview: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteBookingStmt, err = db.PrepareContext(ctx, deleteBooking); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBooking: %w", err)
	}
	if q.deleteBusinessStmt, err = db.PrepareContext(ctx, deleteBusiness); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBusiness: %w", err)
	}
	if q.deleteBusinessHourStmt, err = db.PrepareContext(ctx, deleteBusinessHour); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBusinessHour: %w", err)
	}
	if q.deleteReviewStmt, err = db.PrepareContext(ctx, deleteReview); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReview: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getBookingStmt, err = db.PrepareContext(ctx, getBooking); err != nil {
		return nil, fmt.Errorf("error preparing query GetBooking: %w", err)
	}
	if q.getBusinessHourStmt, err = db.PrepareContext(ctx, getBusinessHour); err != nil {
		return nil, fmt.Errorf("error preparing query GetBusinessHour: %w", err)
	}
	if q.getBusinessesStmt, err = db.PrepareContext(ctx, getBusinesses); err != nil {
		return nil, fmt.Errorf("error preparing query GetBusinesses: %w", err)
	}
	if q.getReviewStmt, err = db.PrepareContext(ctx, getReview); err != nil {
		return nil, fmt.Errorf("error preparing query GetReview: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listBookingsStmt, err = db.PrepareContext(ctx, listBookings); err != nil {
		return nil, fmt.Errorf("error preparing query ListBookings: %w", err)
	}
	if q.listBusinessHoursStmt, err = db.PrepareContext(ctx, listBusinessHours); err != nil {
		return nil, fmt.Errorf("error preparing query ListBusinessHours: %w", err)
	}
	if q.listBusinessesStmt, err = db.PrepareContext(ctx, listBusinesses); err != nil {
		return nil, fmt.Errorf("error preparing query ListBusinesses: %w", err)
	}
	if q.listReviewsStmt, err = db.PrepareContext(ctx, listReviews); err != nil {
		return nil, fmt.Errorf("error preparing query ListReviews: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateBookingStmt, err = db.PrepareContext(ctx, updateBooking); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBooking: %w", err)
	}
	if q.updateBusinessStmt, err = db.PrepareContext(ctx, updateBusiness); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBusiness: %w", err)
	}
	if q.updateBusinessHourStmt, err = db.PrepareContext(ctx, updateBusinessHour); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBusinessHour: %w", err)
	}
	if q.updateReviewStmt, err = db.PrepareContext(ctx, updateReview); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReview: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBookingsStmt != nil {
		if cerr := q.createBookingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBookingsStmt: %w", cerr)
		}
	}
	if q.createBusinessHoursStmt != nil {
		if cerr := q.createBusinessHoursStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBusinessHoursStmt: %w", cerr)
		}
	}
	if q.createBusinessesStmt != nil {
		if cerr := q.createBusinessesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBusinessesStmt: %w", cerr)
		}
	}
	if q.createReviewStmt != nil {
		if cerr := q.createReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReviewStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteBookingStmt != nil {
		if cerr := q.deleteBookingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBookingStmt: %w", cerr)
		}
	}
	if q.deleteBusinessStmt != nil {
		if cerr := q.deleteBusinessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBusinessStmt: %w", cerr)
		}
	}
	if q.deleteBusinessHourStmt != nil {
		if cerr := q.deleteBusinessHourStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBusinessHourStmt: %w", cerr)
		}
	}
	if q.deleteReviewStmt != nil {
		if cerr := q.deleteReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReviewStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getBookingStmt != nil {
		if cerr := q.getBookingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBookingStmt: %w", cerr)
		}
	}
	if q.getBusinessHourStmt != nil {
		if cerr := q.getBusinessHourStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBusinessHourStmt: %w", cerr)
		}
	}
	if q.getBusinessesStmt != nil {
		if cerr := q.getBusinessesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBusinessesStmt: %w", cerr)
		}
	}
	if q.getReviewStmt != nil {
		if cerr := q.getReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReviewStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listBookingsStmt != nil {
		if cerr := q.listBookingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBookingsStmt: %w", cerr)
		}
	}
	if q.listBusinessHoursStmt != nil {
		if cerr := q.listBusinessHoursStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBusinessHoursStmt: %w", cerr)
		}
	}
	if q.listBusinessesStmt != nil {
		if cerr := q.listBusinessesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBusinessesStmt: %w", cerr)
		}
	}
	if q.listReviewsStmt != nil {
		if cerr := q.listReviewsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReviewsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateBookingStmt != nil {
		if cerr := q.updateBookingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBookingStmt: %w", cerr)
		}
	}
	if q.updateBusinessStmt != nil {
		if cerr := q.updateBusinessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBusinessStmt: %w", cerr)
		}
	}
	if q.updateBusinessHourStmt != nil {
		if cerr := q.updateBusinessHourStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBusinessHourStmt: %w", cerr)
		}
	}
	if q.updateReviewStmt != nil {
		if cerr := q.updateReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReviewStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	createBookingsStmt      *sql.Stmt
	createBusinessHoursStmt *sql.Stmt
	createBusinessesStmt    *sql.Stmt
	createReviewStmt        *sql.Stmt
	createUserStmt          *sql.Stmt
	deleteBookingStmt       *sql.Stmt
	deleteBusinessStmt      *sql.Stmt
	deleteBusinessHourStmt  *sql.Stmt
	deleteReviewStmt        *sql.Stmt
	deleteUserStmt          *sql.Stmt
	getBookingStmt          *sql.Stmt
	getBusinessHourStmt     *sql.Stmt
	getBusinessesStmt       *sql.Stmt
	getReviewStmt           *sql.Stmt
	getUserStmt             *sql.Stmt
	listBookingsStmt        *sql.Stmt
	listBusinessHoursStmt   *sql.Stmt
	listBusinessesStmt      *sql.Stmt
	listReviewsStmt         *sql.Stmt
	listUsersStmt           *sql.Stmt
	updateBookingStmt       *sql.Stmt
	updateBusinessStmt      *sql.Stmt
	updateBusinessHourStmt  *sql.Stmt
	updateReviewStmt        *sql.Stmt
	updateUserStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		createBookingsStmt:      q.createBookingsStmt,
		createBusinessHoursStmt: q.createBusinessHoursStmt,
		createBusinessesStmt:    q.createBusinessesStmt,
		createReviewStmt:        q.createReviewStmt,
		createUserStmt:          q.createUserStmt,
		deleteBookingStmt:       q.deleteBookingStmt,
		deleteBusinessStmt:      q.deleteBusinessStmt,
		deleteBusinessHourStmt:  q.deleteBusinessHourStmt,
		deleteReviewStmt:        q.deleteReviewStmt,
		deleteUserStmt:          q.deleteUserStmt,
		getBookingStmt:          q.getBookingStmt,
		getBusinessHourStmt:     q.getBusinessHourStmt,
		getBusinessesStmt:       q.getBusinessesStmt,
		getReviewStmt:           q.getReviewStmt,
		getUserStmt:             q.getUserStmt,
		listBookingsStmt:        q.listBookingsStmt,
		listBusinessHoursStmt:   q.listBusinessHoursStmt,
		listBusinessesStmt:      q.listBusinessesStmt,
		listReviewsStmt:         q.listReviewsStmt,
		listUsersStmt:           q.listUsersStmt,
		updateBookingStmt:       q.updateBookingStmt,
		updateBusinessStmt:      q.updateBusinessStmt,
		updateBusinessHourStmt:  q.updateBusinessHourStmt,
		updateReviewStmt:        q.updateReviewStmt,
		updateUserStmt:          q.updateUserStmt,
	}
}
