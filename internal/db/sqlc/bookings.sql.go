// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookings.sql

package sqlc

import (
	"context"
	"time"
)

const createBookings = `-- name: CreateBookings :one
INSERT INTO bookings (
  user_id, business_id, service, date, status
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_id, business_id, service, date, status, created_at
`

type CreateBookingsParams struct {
	UserID     int64     `json:"user_id"`
	BusinessID int64     `json:"business_id"`
	Service    string    `json:"service"`
	Date       time.Time `json:"date"`
	Status     string    `json:"status"`
}

func (q *Queries) CreateBookings(ctx context.Context, arg CreateBookingsParams) (Booking, error) {
	row := q.queryRow(ctx, q.createBookingsStmt, createBookings,
		arg.UserID,
		arg.BusinessID,
		arg.Service,
		arg.Date,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BusinessID,
		&i.Service,
		&i.Date,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :one
DELETE FROM bookings
WHERE id = $1
RETURNING id, user_id, business_id, service, date, status, created_at
`

func (q *Queries) DeleteBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.queryRow(ctx, q.deleteBookingStmt, deleteBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BusinessID,
		&i.Service,
		&i.Date,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getBooking = `-- name: GetBooking :one
SELECT id, user_id, business_id, service, date, status, created_at FROM bookings
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.queryRow(ctx, q.getBookingStmt, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BusinessID,
		&i.Service,
		&i.Date,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listBookings = `-- name: ListBookings :many
SELECT id, user_id, business_id, service, date, status, created_at FROM bookings
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBookingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]Booking, error) {
	rows, err := q.query(ctx, q.listBookingsStmt, listBookings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BusinessID,
			&i.Service,
			&i.Date,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :exec
UPDATE bookings
SET user_id = $2, 
    business_id = $3,
    service = $4,
    date = $5,
    status = $6
WHERE id = $1
`

type UpdateBookingParams struct {
	ID         int64     `json:"id"`
	UserID     int64     `json:"user_id"`
	BusinessID int64     `json:"business_id"`
	Service    string    `json:"service"`
	Date       time.Time `json:"date"`
	Status     string    `json:"status"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) error {
	_, err := q.exec(ctx, q.updateBookingStmt, updateBooking,
		arg.ID,
		arg.UserID,
		arg.BusinessID,
		arg.Service,
		arg.Date,
		arg.Status,
	)
	return err
}
